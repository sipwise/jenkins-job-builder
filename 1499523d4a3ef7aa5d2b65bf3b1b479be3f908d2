{
  "comments": [
    {
      "key": {
        "uuid": "3aaa91ec_b3a317b1",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 31,
      "author": {
        "id": 1054
      },
      "writtenOn": "2016-07-01T15:56:18Z",
      "side": 1,
      "message": "Last two paragraphs are useful intro to this change, but the final might not make a huge amount of sense in the future.",
      "revId": "1499523d4a3ef7aa5d2b65bf3b1b479be3f908d2",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1aa78d24_be08e12e",
        "filename": "jenkins_jobs/cli/parser.py",
        "patchSetId": 2
      },
      "lineNbr": 30,
      "author": {
        "id": 13807
      },
      "writtenOn": "2016-07-08T13:53:17Z",
      "side": 1,
      "message": "IT says it\u0027s preceded with an underscore but it\u0027s actually not?",
      "revId": "1499523d4a3ef7aa5d2b65bf3b1b479be3f908d2",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3aaa91ec_a6911a49",
        "filename": "jenkins_jobs/config.py",
        "patchSetId": 2
      },
      "lineNbr": 31,
      "author": {
        "id": 1054
      },
      "writtenOn": "2016-07-01T15:56:18Z",
      "side": 1,
      "message": "I\u0027ve commented on this line before, shouldn\u0027t be adding it to every module.",
      "revId": "1499523d4a3ef7aa5d2b65bf3b1b479be3f908d2",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3aaa91ec_664452b7",
        "filename": "jenkins_jobs/config.py",
        "patchSetId": 2
      },
      "lineNbr": 96,
      "author": {
        "id": 1054
      },
      "writtenOn": "2016-07-01T15:56:18Z",
      "side": 1,
      "message": "__ has a certain side effects in python that can make usage with subclassing more awkward lets not use it, a single \u0027_\u0027 is sufficient.",
      "revId": "1499523d4a3ef7aa5d2b65bf3b1b479be3f908d2",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3aaa91ec_e6d322d4",
        "filename": "jenkins_jobs/config.py",
        "patchSetId": 2
      },
      "lineNbr": 100,
      "author": {
        "id": 1054
      },
      "writtenOn": "2016-07-01T15:56:18Z",
      "side": 1,
      "message": "This seems like a bad idea, why would a config object create a command line parser. Is this to work with the initial migration and is it re-factored in a later patch?\n\nOr something that potentially needs to be done subsequently?",
      "revId": "1499523d4a3ef7aa5d2b65bf3b1b479be3f908d2",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3aaa91ec_e97012a7",
        "filename": "jenkins_jobs/config.py",
        "patchSetId": 2
      },
      "lineNbr": 137,
      "author": {
        "id": 1054
      },
      "writtenOn": "2016-07-01T16:04:09Z",
      "side": 1,
      "message": "It seems like we should just call do_magical_things here for now, rather than exposing that function elsewhere.",
      "revId": "1499523d4a3ef7aa5d2b65bf3b1b479be3f908d2",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3aaa91ec_6149dcb7",
        "filename": "jenkins_jobs/config.py",
        "patchSetId": 2
      },
      "lineNbr": 157,
      "author": {
        "id": 1054
      },
      "writtenOn": "2016-07-01T15:56:18Z",
      "side": 1,
      "message": "Lets not do multiline exceptions like this, use that we can split strings across multiple lines within function calls and brackets.\n\n    raise JJBConfigException(\n        \"A valid configuration file is required.\\n\"\n        \"{0} is not valid.\".format(config_filename))",
      "revId": "1499523d4a3ef7aa5d2b65bf3b1b479be3f908d2",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1aa78d24_255c197c",
        "filename": "jenkins_jobs/config.py",
        "patchSetId": 2
      },
      "lineNbr": 171,
      "author": {
        "id": 1054
      },
      "writtenOn": "2016-07-07T16:00:00Z",
      "side": 1,
      "message": "I think I know what was causing me to feel something was wrong here.\n\nThe setting of the config option from options should be done by the parser as part of an extra parse options step since these are command line interface specific rather than config related.\n\nBasically if options.ignore_cache is set, we should have the parser then add that to the instance of this config class it created.\n\nPerhaps that is the plan later after the disentanglement is done, we can probably achieve it here right now as well.",
      "revId": "1499523d4a3ef7aa5d2b65bf3b1b479be3f908d2",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1aa78d24_296d13cc",
        "filename": "jenkins_jobs/config.py",
        "patchSetId": 2
      },
      "lineNbr": 205,
      "author": {
        "id": 1054
      },
      "writtenOn": "2016-07-07T16:00:00Z",
      "side": 1,
      "message": "I think that the \"options.*\" should look to override setting the jenkins.user and jenkins.password config settings from the parser class, and we could probably add a magic method to this cass to take care of unset config options which is really only needed for python 2.6 compatibility, but probably doesn\u0027t hurt to try and retain.",
      "revId": "1499523d4a3ef7aa5d2b65bf3b1b479be3f908d2",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1aa78d24_c59275f5",
        "filename": "jenkins_jobs/config.py",
        "patchSetId": 2
      },
      "lineNbr": 217,
      "author": {
        "id": 1054
      },
      "writtenOn": "2016-07-07T16:00:00Z",
      "side": 1,
      "message": "Seems like this should be in a validate method to check that the config is sane.",
      "revId": "1499523d4a3ef7aa5d2b65bf3b1b479be3f908d2",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1aa78d24_e56851f7",
        "filename": "jenkins_jobs/config.py",
        "patchSetId": 2
      },
      "lineNbr": 232,
      "author": {
        "id": 1054
      },
      "writtenOn": "2016-07-07T16:00:00Z",
      "side": 1,
      "message": "Similar here, a validate method for the config class would make sense for this.",
      "revId": "1499523d4a3ef7aa5d2b65bf3b1b479be3f908d2",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1aa78d24_e9014b06",
        "filename": "jenkins_jobs/config.py",
        "patchSetId": 2
      },
      "lineNbr": 279,
      "author": {
        "id": 1054
      },
      "writtenOn": "2016-07-07T16:00:00Z",
      "side": 1,
      "message": "I think this also needs to be split up between config and parser, where the parser sets options.path based on what the config object exposes and we probably should move some of this code to be callable as part the config object setup.",
      "revId": "1499523d4a3ef7aa5d2b65bf3b1b479be3f908d2",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3aaa91ec_f3111f06",
        "filename": "jenkins_jobs/config.py",
        "patchSetId": 2
      },
      "lineNbr": 287,
      "author": {
        "id": 1054
      },
      "writtenOn": "2016-07-01T15:56:18Z",
      "side": 1,
      "message": "I think by convention this should be at the top.",
      "revId": "1499523d4a3ef7aa5d2b65bf3b1b479be3f908d2",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3aaa91ec_41f780d4",
        "filename": "tests/cmd/test_cmd.py",
        "patchSetId": 2
      },
      "lineNbr": 34,
      "author": {
        "id": 1054
      },
      "writtenOn": "2016-07-01T15:56:18Z",
      "side": 1,
      "message": "So we haven\u0027t been testing this at all, oops.",
      "revId": "1499523d4a3ef7aa5d2b65bf3b1b479be3f908d2",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3aaa91ec_a18aa418",
        "filename": "tests/cmd/test_config.py",
        "patchSetId": 2
      },
      "lineNbr": 34,
      "author": {
        "id": 1054
      },
      "writtenOn": "2016-07-01T15:56:18Z",
      "side": 1,
      "message": "Why explicitly return anything except for \u0027path \u003d\u003d self.global_conf\u0027? Since by default the function will return \u0027None\u0027.\n\nIf needed, just place a default \u0027return False\u0027 at the end of the side_effect.\n\nSince you\u0027re not able to distinguish between False and None anyway with the existing functionality.",
      "revId": "1499523d4a3ef7aa5d2b65bf3b1b479be3f908d2",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    }
  ]
}