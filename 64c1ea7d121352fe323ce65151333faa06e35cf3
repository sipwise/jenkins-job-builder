{
  "comments": [
    {
      "key": {
        "uuid": "3aaa91ec_bb013370",
        "filename": "jenkins_jobs/cli/entry.py",
        "patchSetId": 10
      },
      "lineNbr": 23,
      "author": {
        "id": 1054
      },
      "writtenOn": "2016-07-01T14:56:38Z",
      "side": 1,
      "message": "Probably should be above the jenkins_jobs imports?",
      "revId": "64c1ea7d121352fe323ce65151333faa06e35cf3",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1aa78d24_be3621e5",
        "filename": "jenkins_jobs/cli/entry.py",
        "patchSetId": 10
      },
      "lineNbr": 23,
      "author": {
        "id": 13807
      },
      "writtenOn": "2016-07-08T13:37:42Z",
      "side": 1,
      "message": "+1",
      "parentUuid": "3aaa91ec_bb013370",
      "revId": "64c1ea7d121352fe323ce65151333faa06e35cf3",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3aaa91ec_3bf6e390",
        "filename": "jenkins_jobs/cli/entry.py",
        "patchSetId": 10
      },
      "lineNbr": 25,
      "author": {
        "id": 1054
      },
      "writtenOn": "2016-07-01T14:56:38Z",
      "side": 1,
      "message": "Seems like this should only be in one place within JJB, perhaps just the cmd.py, and if something else is reusing this outside of cmd.py then it is up to that module to define the logging config.",
      "revId": "64c1ea7d121352fe323ce65151333faa06e35cf3",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3aaa91ec_bb2813f0",
        "filename": "jenkins_jobs/cli/entry.py",
        "patchSetId": 10
      },
      "lineNbr": 26,
      "author": {
        "id": 1054
      },
      "writtenOn": "2016-07-01T14:56:38Z",
      "side": 1,
      "message": "I\u0027d be inclined to move this into the class, not as a class attribute, but logger is only needed tp change it\u0027s level within the class below, so probably better not to define it on the module except for use in something like cmd.py.",
      "revId": "64c1ea7d121352fe323ce65151333faa06e35cf3",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3aaa91ec_db851fd0",
        "filename": "jenkins_jobs/cli/entry.py",
        "patchSetId": 10
      },
      "lineNbr": 66,
      "author": {
        "id": 1054
      },
      "writtenOn": "2016-07-01T14:56:38Z",
      "side": 1,
      "message": "I\u0027m not sure it\u0027s a good idea to use \u0027__\u0027 here.\n\nIt means that any subclass that overrides __init__ will likely need to replace the execute method to avoid some interesting behaviour about how __ affects usage in subclasses.\n\nConsider the following:\n\n class Private(object):\n\n     def __init__(self):\n\n         self.__very_private \u003d \"hello \"\n\n     def execute(self):\n\n         print(self.__very_private + \"world\")\n\n\n class PrivateSubclass(Private):\n\n     def __init__(self):\n         super(PrivateSubclass, self).__init__()\n         self.__very_private \u003d \"goodbye \"\n\n\n a \u003d PrivateSubclass()\n a.execute()\n\n\nThe output is: \"hello world\"\n\nIf you replace \u0027__very_private\u0027 with \u0027_very_private\u0027 the output changes to: \"goodbye world\"\n\nUse of \u0027__\u0027 should be for something that is very specific to a class implementation, and I\u0027m not sure this is something that is that specific.",
      "revId": "64c1ea7d121352fe323ce65151333faa06e35cf3",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3aaa91ec_bbebf37a",
        "filename": "jenkins_jobs/cli/entry.py",
        "patchSetId": 10
      },
      "lineNbr": 93,
      "author": {
        "id": 1054
      },
      "writtenOn": "2016-07-01T14:56:38Z",
      "side": 1,
      "message": "Prefer being consistent with the code style above rather than having some indented and some not.",
      "revId": "64c1ea7d121352fe323ce65151333faa06e35cf3",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3aaa91ec_3b7543cc",
        "filename": "jenkins_jobs/cli/entry.py",
        "patchSetId": 10
      },
      "lineNbr": 106,
      "author": {
        "id": 1054
      },
      "writtenOn": "2016-07-01T14:56:38Z",
      "side": 1,
      "message": "I\u0027ve checked and although the parser appears to format correctly, it\u0027s probably better to remain consistent with all the other help strings.\n\nShould be able to use the following format:\n\n help\u003d\u0027The Jenkins user to use for authentication. This overrides \u0027\n      \u0027the user specified in the configuration file.\u0027",
      "revId": "64c1ea7d121352fe323ce65151333faa06e35cf3",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3aaa91ec_c64a665b",
        "filename": "jenkins_jobs/cli/subcommand/base.py",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 1054
      },
      "writtenOn": "2016-07-01T14:56:38Z",
      "side": 1,
      "message": "License and copyright?",
      "revId": "64c1ea7d121352fe323ce65151333faa06e35cf3",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3aaa91ec_c671c6ad",
        "filename": "jenkins_jobs/cli/subcommand/base.py",
        "patchSetId": 10
      },
      "lineNbr": 28,
      "author": {
        "id": 1054
      },
      "writtenOn": "2016-07-01T14:56:38Z",
      "side": 1,
      "message": "\u0027maricals\u0027? should be \"wonderful\" as well.",
      "revId": "64c1ea7d121352fe323ce65151333faa06e35cf3",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3aaa91ec_066c6ecf",
        "filename": "jenkins_jobs/cli/subcommand/base.py",
        "patchSetId": 10
      },
      "lineNbr": 36,
      "author": {
        "id": 1054
      },
      "writtenOn": "2016-07-01T14:56:38Z",
      "side": 1,
      "message": "This method and the following result in a change in behaviour of what the CLI supports as inputs. I think it would be better to combine them as the recursive/exclude options are intended to complement one another and exclude doesn\u0027t make sense by itself without the recursive option since why would you need to specify additional paths to exclude from being processed if you didn\u0027t include them through the recursive option walking the entire tree.",
      "revId": "64c1ea7d121352fe323ce65151333faa06e35cf3",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3aaa91ec_466676ef",
        "filename": "jenkins_jobs/cli/subcommand/base.py",
        "patchSetId": 10
      },
      "lineNbr": 50,
      "author": {
        "id": 1054
      },
      "writtenOn": "2016-07-01T14:56:38Z",
      "side": 1,
      "message": "for consistency with above lets keep short and long options on the same line.",
      "revId": "64c1ea7d121352fe323ce65151333faa06e35cf3",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3aaa91ec_86605ed1",
        "filename": "jenkins_jobs/cli/subcommand/base.py",
        "patchSetId": 10
      },
      "lineNbr": 55,
      "author": {
        "id": 1054
      },
      "writtenOn": "2016-07-01T14:56:38Z",
      "side": 1,
      "message": "You can use standard quotes and python will automatically concatenate strings on subsequent lines until a comma or closing bracket is encountered.",
      "revId": "64c1ea7d121352fe323ce65151333faa06e35cf3",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3aaa91ec_a6847a5d",
        "filename": "jenkins_jobs/cli/subcommand/delete.py",
        "patchSetId": 10
      },
      "lineNbr": 10,
      "author": {
        "id": 1054
      },
      "writtenOn": "2016-07-01T14:56:38Z",
      "side": 1,
      "message": "This is a change in behaviour from before, you\u0027re removing the ability to process the given paths recursively for the delete command.",
      "revId": "64c1ea7d121352fe323ce65151333faa06e35cf3",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1aa78d24_feff09a8",
        "filename": "jenkins_jobs/cli/subcommand/delete_all.py",
        "patchSetId": 10
      },
      "lineNbr": 11,
      "author": {
        "id": 13807
      },
      "writtenOn": "2016-07-08T13:37:42Z",
      "side": 1,
      "message": "Like the other files I think we should indent at 4 spaces here to cut down on the number of lines the help needs to be.",
      "revId": "64c1ea7d121352fe323ce65151333faa06e35cf3",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1aa78d24_7e2af92d",
        "filename": "jenkins_jobs/cli/subcommand/test.py",
        "patchSetId": 10
      },
      "lineNbr": 17,
      "author": {
        "id": 13807
      },
      "writtenOn": "2016-07-08T13:37:42Z",
      "side": 1,
      "message": "Indent at 4 spaces like the other files.",
      "revId": "64c1ea7d121352fe323ce65151333faa06e35cf3",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1aa78d24_3ea511b5",
        "filename": "jenkins_jobs/cli/subcommand/update.py",
        "patchSetId": 10
      },
      "lineNbr": 14,
      "author": {
        "id": 13807
      },
      "writtenOn": "2016-07-08T13:37:42Z",
      "side": 1,
      "message": "Indent at 4 spaces",
      "revId": "64c1ea7d121352fe323ce65151333faa06e35cf3",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3aaa91ec_46db167e",
        "filename": "jenkins_jobs/cmd.py",
        "patchSetId": 10
      },
      "lineNbr": 36,
      "author": {
        "id": 1054
      },
      "writtenOn": "2016-07-01T14:56:38Z",
      "side": 1,
      "message": "So do we need this in both cli.entry and here? Seems like it should only be in one place.",
      "revId": "64c1ea7d121352fe323ce65151333faa06e35cf3",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3aaa91ec_46c2f687",
        "filename": "tests/cmd/subcommands/test_test.py",
        "patchSetId": 10
      },
      "lineNbr": 26,
      "author": {
        "id": 1054
      },
      "writtenOn": "2016-07-01T14:56:38Z",
      "side": 1,
      "message": "Would it be easier to have [\u0027--conf\u0027, self.default_config_file, \u0027test\u0027] as a base args that we add to for each test rather than repeating it everywhere.",
      "revId": "64c1ea7d121352fe323ce65151333faa06e35cf3",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3aaa91ec_c63426ae",
        "filename": "tests/cmd/subcommands/test_test.py",
        "patchSetId": 10
      },
      "lineNbr": 31,
      "author": {
        "id": 1054
      },
      "writtenOn": "2016-07-01T14:56:38Z",
      "side": 1,
      "message": "replace with execute_jenkins_jobs_with_args(args)?",
      "revId": "64c1ea7d121352fe323ce65151333faa06e35cf3",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3aaa91ec_666732b8",
        "filename": "tests/cmd/subcommands/test_test.py",
        "patchSetId": 10
      },
      "lineNbr": 286,
      "author": {
        "id": 1054
      },
      "writtenOn": "2016-07-01T14:56:38Z",
      "side": 1,
      "message": "To me this seems much more difficult to assert whether the behaviour is correct for the recursive/exclude than before.\n\nIf it was felt that building the result from the input dynamically isn\u0027t explicit enough, it could have been explicitly listed as to what the correct output should be.\n\nI might take a look at rewriting just these tests to see if it\u0027s possible to see if they can be made explicit without needing to generate the output files and applying them to all subcommands that use the recursive parser to ensure the behaviour is correctly included.\n\nCan move on and come back to tidy these tests later than require we get them written in a particular way.",
      "revId": "64c1ea7d121352fe323ce65151333faa06e35cf3",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3aaa91ec_e6116206",
        "filename": "tests/cmd/subcommands/test_test.py",
        "patchSetId": 10
      },
      "lineNbr": 336,
      "author": {
        "id": 1054
      },
      "writtenOn": "2016-07-01T14:56:38Z",
      "side": 1,
      "message": "Previously this also checked that using \u0027:\u0027 as a path separator worked to provide multiple excludes. Possibly that should move to being done by the dedicated tests for recursive/exclude path checking.",
      "revId": "64c1ea7d121352fe323ce65151333faa06e35cf3",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    }
  ]
}