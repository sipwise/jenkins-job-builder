{
  "comments": [
    {
      "key": {
        "uuid": "7a016987_04c8f272",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 33,
      "author": {
        "id": 13487
      },
      "writtenOn": "2015-05-21T16:38:18Z",
      "side": 1,
      "message": "I actually find this commit message somewhat confusing. Would you mind clarifying your terminology with an annotated complete example similar to:\n\n  - project:\n    name: \u0027p\u0027\n    key: \u0027value-p\u0027          # \u003c- project parameter\n    jobs:\n      - \u0027jg\u0027:\n        key: \u0027value-p-i1\u0027   # \u003c- project instance parameter\n      - \u0027jt\u0027:\n        key: \u0027value-p-i2\u0027   # \u003c- project instance parameter\n      - \u0027j\u0027\n\n  - job-group:\n    name: \u0027jg\u0027\n    key: \u0027value-jg\u0027         # \u003c- job-group parameter\n    jobs:\n      - \u0027jt\u0027:\n        key: \u0027value-jg-i\u0027   # \u003c- job-group instance parameter\n\n  - job-template:\n    name: \u0027jt\u0027\n    key: \u0027value-jt\u0027         # \u003c- job-template parameter\n\n  - job:\n    name: \u0027j\u0027\n\n  - defaults:\n    name: \u0027d\u0027\n    key: \u0027value-d\u0027          # \u003c- defaults parameter\n\nThen show that the current override order from least to greatest precedence is:\n\n  defaults parameter -\u003e job-template parameter -\u003e project parameter -\u003e project instance parameter -\u003e job-group parameter -\u003e job-group instance parameter\n\nAnd that what this patch does is change the order to:\n\n  defaults parameter -\u003e job-template parameter -\u003e project parameter -\u003e job-group parameter -\u003e job-group instance parameter -\u003e project instance parameter\n\nWhen we talked about this in IRC several weeks ago this is the order I was trying to describe:\n\n  defaults parameter -\u003e job-template parameter -\u003e job-group parameter -\u003e job-group instance parameter -\u003e project parameter -\u003e project instance parameter\n\nI indicated how to change this with a comment on the builder.py patch.",
      "revId": "faba75149a04f74d5cbc889a39a75027c46ee437",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a016987_071d9465",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 33,
      "author": {
        "id": 13487
      },
      "writtenOn": "2015-05-21T16:39:45Z",
      "side": 1,
      "message": "Sorry, I meant \"on the parser.py patch\"",
      "parentUuid": "7a016987_04c8f272",
      "revId": "faba75149a04f74d5cbc889a39a75027c46ee437",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5afe65bd_733b5539",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 33,
      "author": {
        "id": 1054
      },
      "writtenOn": "2015-06-03T14:14:48Z",
      "side": 1,
      "message": "The poor terminology is definitely a problem I\u0027ll look to correct this.\n\nI don\u0027t believe the idea of a job-template parameter exists in JJB, if you define a key at that level it never gets picked up within the template or any macros it references. Unless that is something you\u0027d like to see added?\n\nSo perhaps current behaviour is better described as (dropped parameter for sake of brevity):\n\n defaults -\u003e project -\u003e project instance -\u003e job-group -\u003e job-group instance\n\n\nI think that:\n\n defaults -\u003e project -\u003e job-group -\u003e job-group instance  -\u003e project instance\n\nmight be more consistent and useful than:\n\n defaults -\u003e job-group -\u003e job-group instance -\u003e project -\u003e project instance\n\nCourse both are better than the current situation :)\n\n\nThe difference being at the level at which the knowledge about what is the best value to use varies and whether you consider the project params and job-group params more global defaults with the instance ones being specific overrides. Projects can include multiple job groups, where the job-group and it\u0027s job may know more about what values should be used than the project, and with the second one i think there is a greater chance of ending up having to override the same param at both the project and project instance level to get the desired behaviour.\n\n\nThink the hierarchy can be shown as:\n\n - project\n     - project instance\n\n - project\n     - job-group\n         - job-group instance\n             - project instance\n\nTo be consistent I think we need to either have parent always override child or child override parent levels. One or the other. The problem at the moment is with the second item above, the job-group params are overridden by job-group instance params and the result overrides both the project instance and project level params.\n\n\nI\u0027m assuming here of course based on some experiments additionally with nested job-groups that it seems better to treat project params as a project level defaults so you can have something like the following:\n\n defaults -\u003e\n   project (consider default) params -\u003e\n     job-group level 1 (consider default) params -\u003e\n       job-group level 2 (consider default) params -\u003e\n         job level 2 instance params -\u003e\n           job level 1 instance params -\u003e\n             project instance params\n\nEssentially the RHS always overrides LHS, no matter how deep you job in levels around grouping data.\n\n\nI\u0027m not sure with the alternative precedence you proposed what would be the correct order that would make sense and be consistent when considering the possibility of nested job-groups.",
      "parentUuid": "7a016987_04c8f272",
      "revId": "faba75149a04f74d5cbc889a39a75027c46ee437",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa32b979_1303e910",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 33,
      "author": {
        "id": 13487
      },
      "writtenOn": "2015-06-23T02:19:36Z",
      "side": 1,
      "message": "I don\u0027t believe the idea of a job-template parameter exists in JJB, if you\n    define a key at that level it never gets picked up within the template or any\n    macros it references. Unless that is something you\u0027d like to see added?\n\nI\u0027m 100% certain that variables set at the job-template level are used during\ninterpolation:\n\n* http://git.openstack.org/cgit/openstack-infra/jenkins-job-builder/tree/jenkins_jobs/parser.py#n215\n  Here is where we get our job-template during job-group reification.\n* http://git.openstack.org/cgit/openstack-infra/jenkins-job-builder/tree/jenkins_jobs/parser.py#n225\n  Here is where we pass that job-template in to the expansion method\n* http://git.openstack.org/cgit/openstack-infra/jenkins-job-builder/tree/jenkins_jobs/parser.py#n270\n  Here is where we munge together all the defaults, project/job-group params,\n  and the job-template params. After line 271, the `params` variable contains\n  variables set at the defaults, project, job-group, and job-template levels.\n* http://git.openstack.org/cgit/openstack-infra/jenkins-job-builder/tree/jenkins_jobs/parser.py#n126o\n  In the applyDefaults usage under consideration from the previous bullet point\n  the \"template\" in line 271 ends up being the \"override_dict\" in this method. I\n  know, it\u0027s ugly and confusing as hell and I can\u0027t wait to start defining\n  jenkins jobs in pure Python without the YamlParser.\n\n    So perhaps current behaviour is better described as (dropped parameter for sake\n        of brevity):\n\n    defaults -\u003e project -\u003e project instance -\u003e job-group -\u003e job-group instance\n\nThis should include job template.\n\n    I think that:\n\n    defaults -\u003e project -\u003e job-group -\u003e job-group instance -\u003e project instance\n\n    might be more consistent and useful than:\n\n    defaults -\u003e job-group -\u003e job-group instance -\u003e project -\u003e project instance\n\nWhat makes the former more consistent?\n\n    Course both are better than the current situation :)\n\n    The difference being at the level at which the knowledge about what is the\n    best value to use varies and whether you consider the project params and\n    job-group params more global defaults with the instance ones being specific\n\nI consider project instance params to be more specific than project params and\njob group instance params to be more specific than job group params.\n\nHowever, it\u0027s still not clear to me why you think project params are less\nspecific than job group params or how this could be expected to fit with a JJB\nuser\u0027s intution. Most people that I have talked to expect exactly the override\norder I described in my previous comment and I suspect I would have just as\ndifficult a time explaining your proposed override order as I do explaining the\ncurrent override order.\n\n    overrides. Projects can include multiple job groups, where the job-group and\n\nTrue, projects can contain multiple groups, but in almost 100% of usages I\ndefine job group specific JJB variables that I expect to set values for at the\nproject and project instance level. When I use the same job group multiple times\nwithin a given project it is usually for the same of reifying git branch\nspecific pipelines so the number of variables that need to be set at the project\ninstance level is actually relatively small. If job groups end up overriding\nproject parameters then I will have to set values I am currently setting at the\nproject level at each individual project instance level which will cause my\nproject yaml blocks to increase in size by 2-3 times.\n\n    it\u0027s job may know more about what values should be used than the project,\n    and with the second one i think there is a greater chance of ending up\n    having to override the same param at both the project and project instance\n    level to get the desired behaviour.\n\nI don\u0027t grok the second part of this sentence.\n\n    Think the hierarchy can be shown as:\n\n    - project\n      - project instance\n\n    - project\n      - job-group\n        - job-group instance\n          - project instance\n\nWhy does this notation and terminology differ from the notation shown below?\nKeep in mind other people may be reading these comments so it will help them to\nkeep up with our discussion if we avoid introducing extraneous notation.\n\n    To be consistent I think we need to either have parent always override child\n    or child override parent levels. One or the other. The problem at the moment\n\nMy strong preference is that parent always override child, assuming that in the\nproject and job-group relationship we are agreed that \"project\" is the parent\nand \"job-group\" is the child. The reason for this is that at the job group level\nwe don\u0027t know anything about how this job group will be used, we just have a\nvague idea that it might be used in some particular way--with this in mind we\nset default values here that we can then expect may be overridden by variables\nset at the project level. In other words, a job group is not as specific as a\nproject.\n\nI consider job groups to be less specific than projects because job groups can\nbe used in many different projects. A job group might for example be specific to\n\"clojure test and build jobs\"; a project might then be \"puppet-server\" or\n\"puppetdb\" both of which are clojure projects that need to \"reuse\" the\npreviously-mentioned \"clojure test and build jobs\"; however, puppet-server and\npuppetdb may need to override variables used in their shared pipeline.\n\nSimilarly, job templates are less specific than job groups because a given job\ntemplate might be used in different job groups with slightly different purposes\nor even multiple times within the same job group so that when reified and used\nto create a jenkins job they can be run in parallel with each job running a\nsubset of tests (which is one way to reduce overall test execution time when a\ntest suite would otherwise be expected to run on the order of hours).\n\n    is with the second item above, the job-group params are overridden by\n    job-group instance params and the result overrides both the project instance\n    and project level params.\n\n    I\u0027m assuming here of course based on some experiments additionally with\n    nested job-groups that it seems better to treat project params as a project\n    level defaults so you can have something like the following:\n\nWe already have a way to set defaults on a per-project basis...using JJB\ndefaults.  Why do we need more? Once we are at the \"project\" level we are about\nas specific as we can be and it really seems to me like the principle driving\noverride order should be \"more specific, higher priority; less specific, lower\npriority\".\n\n    defaults -\u003e\n      project (consider default) params -\u003e\n        job-group level 1 (consider default) params -\u003e\n\nI\u0027m not sure I understand the \"level N\" references here. Is this in reference to\nnested job groups? In that case what does \"job level 1\" and \"job level 2\" below\nreference?\n\nAlso, does level 2 job group contain level 1 or vice versa it\u0027s not clear to me\nwhich job group in your example \"contains\" the other and that information is\nabsolutely necessary for us to agree on an override order.\n\n          job-group level 2 (consider default) params -\u003e\n            job level 2 instance params -\u003e\n              job level 1 instance params -\u003e\n                project instance params\n\n    Essentially the RHS always overrides LHS, no matter how deep you job in\n    levels around grouping data.\n\n    I\u0027m not sure with the alternative precedence you proposed what would be the\n    correct order that would make sense and be consistent when considering the\n    possibility of nested job-groups.\n\nI\u0027ll try using your notation to describe my ideal precedence again this time\nadding the nested job groups. I will also include job templates since as I\u0027ve\ndemonstrated variables set on job templates *are* included during template\nexpansion:\n\n  defaults -\u003e\n    job-template params -\u003e\n      [... -\u003e job-group level N+1 params -\u003e job-group level N+1 instance params ]\n        [... -\u003e job-group level N params -\u003e job-group level N instance params ]\n          job-group level 1 params -\u003e job-group level 1 instance params -\u003e\n            project params -\u003e\n              project instance params\n\nIn this example \"level 1\" job groups are those that are contained by projects.\n\"level N + 1\" job groups are contained by \"level N\" job groups. For example\nsuppose we have a job group contained by a project that itself contains a second\njob group. The second job group is referenced within the \"jobs\" list of the\nfirst and would be considered a \"level 2\" job group whereas the first would be\nconsidered a \"level 1\" job group.",
      "parentUuid": "5afe65bd_733b5539",
      "revId": "faba75149a04f74d5cbc889a39a75027c46ee437",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa32b979_8b900798",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 33,
      "author": {
        "id": 1054
      },
      "writtenOn": "2015-06-28T14:17:09Z",
      "side": 1,
      "message": "The job-template param is not something I\u0027ve used, but you\u0027re absolutely right, when I looked at the code it definitely does allow params take defaults from the template which override the those from the specified defaults.",
      "parentUuid": "fa32b979_1303e910",
      "revId": "faba75149a04f74d5cbc889a39a75027c46ee437",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a016987_4145bc43",
        "filename": "jenkins_jobs/parser.py",
        "patchSetId": 2
      },
      "lineNbr": 221,
      "author": {
        "id": 13487
      },
      "writtenOn": "2015-05-21T16:38:18Z",
      "side": 1,
      "message": "I would take this on step further and also move the \"project\":\n\n  d \u003d {}\n  d.update(group)\n  d.update(group_jobparams)\n  d.update(project)\n  d.update(jobparams)\n\nAnd probably remove the comment about \"allow a group to override parameters set by a project\".",
      "revId": "faba75149a04f74d5cbc889a39a75027c46ee437",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    }
  ]
}