{
  "comments": [
    {
      "key": {
        "uuid": "7aa08908_bac79843",
        "filename": "jenkins_jobs/modules/builders.py",
        "patchSetId": 5
      },
      "lineNbr": 3257,
      "author": {
        "id": 1054
      },
      "writtenOn": "2016-06-14T16:06:51Z",
      "side": 1,
      "message": "Is this required? Seems like it should be. Should have \u0027(required)\u0027 afterwards so.",
      "revId": "0f700bdbc47f89c9ed2fed5a1cb480afb95dae24",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7aa08908_daa8a122",
        "filename": "jenkins_jobs/modules/builders.py",
        "patchSetId": 5
      },
      "lineNbr": 3281,
      "author": {
        "id": 1054
      },
      "writtenOn": "2016-06-14T16:06:51Z",
      "side": 1,
      "message": "\u0027Optional\u0027 is used for items that do not appear in the resulting output if not set, in this case you are default to \u00270\u0027 below.\n\nSame goes for all the other optional entries, they mostly appear to be \"(default \u0027\u0027)\" rather than optional.",
      "revId": "0f700bdbc47f89c9ed2fed5a1cb480afb95dae24",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7aa08908_fa7ac0b8",
        "filename": "jenkins_jobs/modules/builders.py",
        "patchSetId": 5
      },
      "lineNbr": 3321,
      "author": {
        "id": 1054
      },
      "writtenOn": "2016-06-14T16:06:51Z",
      "side": 1,
      "message": "What\u0027s the intended result here if \u0027playbook\u0027 is not defined? Currently it would contain the string \u0027None\u0027.\n\nEither there is a default value to be used with \"data.get(\u0027playbook\u0027, \u0027default\u0027)\" or it\u0027s required and needs something like the following:\n\n try:\n     XML.SubElement(plugin, \"playbook\").text \u003d str(data[\u0027playbook\u0027])\n except KeyError as e:\n     raise MissingAttributeError(e)\n\nMissingAttributeError is a JJB custom error which will print out the correct info about what was missing.",
      "revId": "0f700bdbc47f89c9ed2fed5a1cb480afb95dae24",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7aa08908_b5acc9ed",
        "filename": "jenkins_jobs/modules/builders.py",
        "patchSetId": 5
      },
      "lineNbr": 3333,
      "author": {
        "id": 1054
      },
      "writtenOn": "2016-06-14T16:06:51Z",
      "side": 1,
      "message": "You shouldn\u0027t need to specify the module.",
      "revId": "0f700bdbc47f89c9ed2fed5a1cb480afb95dae24",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7aa08908_d597d545",
        "filename": "jenkins_jobs/modules/builders.py",
        "patchSetId": 5
      },
      "lineNbr": 3334,
      "author": {
        "id": 1054
      },
      "writtenOn": "2016-06-14T16:06:51Z",
      "side": 1,
      "message": "The preferred style for this project would be:\n\nBefore the if statement \u0027if inventory_type \u003d\u003d \u0027path\u0027:\u0027\n\n inv_data \u003d data.get(\u0027inventory\u0027, {})\n\nThat will allow usage below of of the inv_data for the two lines where you\u0027re doing a data.get(\u0027inventory\u0027, {}) and also make it cleaner to do a direct key retrieval for try/except.\n\nThis second\n\n try:\n     XML.SubElement(inventory, \u0027path\u0027).text \u003d inv_data[\u0027path\u0027]\n except KeyError:\n     raise MissingAttributeError(\u0027inventory[\\\u0027path\\\u0027]\u0027)\n\n\u0027inventory.path\u0027 is more an ansible type data access, it also is used in python/JJB to denote module.function naming, so it doesn\u0027t make the same sense to use it describe a data representation here since it can cause confusion seeing it used for data as well. In this case I think better off using explicit python style rather than ansible style.\n\nAgain you don\u0027t need to pass \u0027ansible-playbook\u0027 into the exception, it will be extracted automatically.",
      "revId": "0f700bdbc47f89c9ed2fed5a1cb480afb95dae24",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7aa08908_7021cf9d",
        "filename": "jenkins_jobs/modules/builders.py",
        "patchSetId": 5
      },
      "lineNbr": 3346,
      "author": {
        "id": 1054
      },
      "writtenOn": "2016-06-14T16:06:51Z",
      "side": 1,
      "message": "You\u0027ve correctly converted below for items using true/false, just need to apply it here.",
      "revId": "0f700bdbc47f89c9ed2fed5a1cb480afb95dae24",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7aa08908_d0a523a2",
        "filename": "jenkins_jobs/modules/builders.py",
        "patchSetId": 5
      },
      "lineNbr": 3349,
      "author": {
        "id": 1054
      },
      "writtenOn": "2016-06-14T16:06:51Z",
      "side": 1,
      "message": "no need for \u0027ansible-playbook\u0027.",
      "revId": "0f700bdbc47f89c9ed2fed5a1cb480afb95dae24",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7aa08908_30d58742",
        "filename": "jenkins_jobs/modules/builders.py",
        "patchSetId": 5
      },
      "lineNbr": 3376,
      "author": {
        "id": 1054
      },
      "writtenOn": "2016-06-14T16:06:51Z",
      "side": 1,
      "message": "Probably better to use the is_sequence function from the errors module, we can move it to the utils module later. That way if we\u0027re using a different container type as long as it\u0027s list like, the code will behave the same.",
      "revId": "0f700bdbc47f89c9ed2fed5a1cb480afb95dae24",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7aa08908_f0fc9fb6",
        "filename": "jenkins_jobs/modules/builders.py",
        "patchSetId": 5
      },
      "lineNbr": 3378,
      "author": {
        "id": 1054
      },
      "writtenOn": "2016-06-14T16:06:51Z",
      "side": 1,
      "message": "This will actually result in ansible-playbook.ansible-playbook.variables being used in the error. No need to include entry point name, it\u0027ll be extracted automatically.",
      "revId": "0f700bdbc47f89c9ed2fed5a1cb480afb95dae24",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7aa08908_fa8c7d36",
        "filename": "jenkins_jobs/modules/builders.py",
        "patchSetId": 5
      },
      "lineNbr": 3382,
      "author": {
        "id": 1054
      },
      "writtenOn": "2016-06-14T16:06:51Z",
      "side": 1,
      "message": "Should probably just check that keys is a supported attribute.",
      "revId": "0f700bdbc47f89c9ed2fed5a1cb480afb95dae24",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7aa08908_1a2ea942",
        "filename": "jenkins_jobs/modules/builders.py",
        "patchSetId": 5
      },
      "lineNbr": 3384,
      "author": {
        "id": 1054
      },
      "writtenOn": "2016-06-14T16:06:51Z",
      "side": 1,
      "message": "Same here about \"ansible-playbook\", and also how you\u0027re representing the data type.",
      "revId": "0f700bdbc47f89c9ed2fed5a1cb480afb95dae24",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7aa08908_3a0d658f",
        "filename": "jenkins_jobs/modules/builders.py",
        "patchSetId": 5
      },
      "lineNbr": 3388,
      "author": {
        "id": 1054
      },
      "writtenOn": "2016-06-14T16:06:51Z",
      "side": 1,
      "message": "Same here about \u0027ansible-playbook\u0027 and data representation, \"variables[][\u0027name\u0027]\" would be clear. If you really want to tell them which one, use enumerate about and include the index value outputted.",
      "revId": "0f700bdbc47f89c9ed2fed5a1cb480afb95dae24",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7aa08908_f0ebffa1",
        "filename": "jenkins_jobs/modules/builders.py",
        "patchSetId": 5
      },
      "lineNbr": 3391,
      "author": {
        "id": 1054
      },
      "writtenOn": "2016-06-14T16:06:51Z",
      "side": 1,
      "message": "Since you are already testing for name, you can just use \"values[\u0027name\u0027]\".",
      "revId": "0f700bdbc47f89c9ed2fed5a1cb480afb95dae24",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7aa08908_90e55bdd",
        "filename": "jenkins_jobs/modules/builders.py",
        "patchSetId": 5
      },
      "lineNbr": 3396,
      "author": {
        "id": 1054
      },
      "writtenOn": "2016-06-14T16:06:51Z",
      "side": 1,
      "message": "Looks like you missed these when converting to the standard true/false text format.",
      "revId": "0f700bdbc47f89c9ed2fed5a1cb480afb95dae24",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7aa08908_5d802bf7",
        "filename": "tests/builders/fixtures/ansible-playbook001.yaml",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 1054
      },
      "writtenOn": "2016-06-14T16:06:51Z",
      "side": 1,
      "message": "One of the two examples needs to test all the non-default values, both as an aid to documentation and to exercise the code to allow comparing default to non-default.",
      "revId": "0f700bdbc47f89c9ed2fed5a1cb480afb95dae24",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    }
  ]
}