{
  "comments": [
    {
      "key": {
        "uuid": "fa81d914_3cfd663b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 7,
      "author": {
        "id": 1054
      },
      "writtenOn": "2015-01-29T00:08:02Z",
      "side": 1,
      "message": "Forgot to mention, the subject should summerize the patch intent.\n\n\"Support deep merge of defaults\" would probably cover it and be sufficiently descriptive for anyone working on the code.",
      "revId": "169e18cb7784a17a06626771cb23f162785dee82",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa81d914_2c02bb3e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 8,
      "author": {
        "id": 1106
      },
      "writtenOn": "2015-01-28T11:31:37Z",
      "side": 1,
      "message": "While there\u0027s no closed-loop process for Storyboard-\u003eGerrit now, I think you should still stick to the convention of using \u0027Closes-Bug\u0027 instead of \u0027fix\u0027:\n\nhttps://wiki.openstack.org/wiki/GitCommitMessages",
      "revId": "169e18cb7784a17a06626771cb23f162785dee82",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa81d914_35267e17",
        "filename": "jenkins_jobs/builder.py",
        "patchSetId": 3
      },
      "lineNbr": 226,
      "author": {
        "id": 1054
      },
      "writtenOn": "2015-01-28T13:09:47Z",
      "side": 1,
      "message": "Probably not going to behave like you would expect across python 2 and 3.\n\nSuggest just checking to see if data or updated_data have the method \u0027format\u0027 and treat it like a string if they do.\n\nSame goes for the other places where you check for string.",
      "revId": "169e18cb7784a17a06626771cb23f162785dee82",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa81d914_c411f9ad",
        "filename": "jenkins_jobs/builder.py",
        "patchSetId": 3
      },
      "lineNbr": 231,
      "author": {
        "id": 12873
      },
      "writtenOn": "2015-01-28T10:02:25Z",
      "side": 1,
      "message": "maybe:\nmap(lambda x:  data[x] \u003d updated_data[x], self._findDiffKey(data, updated_data))\n\nwill be much faster",
      "revId": "169e18cb7784a17a06626771cb23f162785dee82",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "da86d52c_42f6cfd8",
        "filename": "jenkins_jobs/builder.py",
        "patchSetId": 3
      },
      "lineNbr": 231,
      "author": {
        "id": 11223
      },
      "writtenOn": "2015-02-02T11:52:31Z",
      "side": 1,
      "message": "Built-in function map() varies from Python 2 to Python 3. I\u0027ve tried to adopt your advice in patchset 4 and 5. But testr tests in Python 3 environment failed. Actually the return value of map() has changed from list object to map object.",
      "parentUuid": "fa81d914_c411f9ad",
      "revId": "169e18cb7784a17a06626771cb23f162785dee82",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa81d914_95ef2ab0",
        "filename": "jenkins_jobs/builder.py",
        "patchSetId": 3
      },
      "lineNbr": 233,
      "author": {
        "id": 1054
      },
      "writtenOn": "2015-01-28T13:09:47Z",
      "side": 1,
      "message": "Try and avoid camelcase for variables as they otherwise appear to be classes.",
      "revId": "169e18cb7784a17a06626771cb23f162785dee82",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa81d914_8076063d",
        "filename": "jenkins_jobs/builder.py",
        "patchSetId": 3
      },
      "lineNbr": 242,
      "author": {
        "id": 1054
      },
      "writtenOn": "2015-01-28T13:09:47Z",
      "side": 1,
      "message": "This part is where I think some unit tests would be useful to assess where there are cases where should only care about whether the attr is a string type or not.",
      "revId": "169e18cb7784a17a06626771cb23f162785dee82",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa81d914_4095ee3e",
        "filename": "jenkins_jobs/builder.py",
        "patchSetId": 3
      },
      "lineNbr": 245,
      "author": {
        "id": 1054
      },
      "writtenOn": "2015-01-28T13:09:47Z",
      "side": 1,
      "message": "Might be better to test for \u0027hasattr(attr, __iter__)\u0027 provided you put this after the check for a dict and using if/elif checks. If something should be treated like a dict no need to check if it\u0027s behaves like a list as well.",
      "revId": "169e18cb7784a17a06626771cb23f162785dee82",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa81d914_35259ec2",
        "filename": "jenkins_jobs/builder.py",
        "patchSetId": 3
      },
      "lineNbr": 249,
      "author": {
        "id": 1054
      },
      "writtenOn": "2015-01-28T13:09:47Z",
      "side": 1,
      "message": "OrderedDict is a superclass of dict, so either check for isinstance(dict) or check if \u0027hasattr(ele, \u0027keys\u0027)\u0027 to see if the object provides an interface to be interacted with like a dictionary.\n\nSimilarly for the other checks if the item is a dict.\n\nThis removes the need to know about the specific implementation of a dict we are using.",
      "revId": "169e18cb7784a17a06626771cb23f162785dee82",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa81d914_04d871ee",
        "filename": "jenkins_jobs/builder.py",
        "patchSetId": 3
      },
      "lineNbr": 252,
      "author": {
        "id": 12873
      },
      "writtenOn": "2015-01-28T10:02:25Z",
      "side": 1,
      "message": "looks like some pep8 stuff\nalmost no indentation between lines 252 and 253. according to pep8 it seems that you need one more tab on line 252.",
      "revId": "169e18cb7784a17a06626771cb23f162785dee82",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa81d914_f53b06e9",
        "filename": "jenkins_jobs/builder.py",
        "patchSetId": 3
      },
      "lineNbr": 271,
      "author": {
        "id": 1054
      },
      "writtenOn": "2015-01-28T13:09:47Z",
      "side": 1,
      "message": "This is essentially a duplicate of _findCommonKey, why not just use that directly since you only call _hasCommonKey once.",
      "revId": "169e18cb7784a17a06626771cb23f162785dee82",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa81d914_c4ed798d",
        "filename": "jenkins_jobs/builder.py",
        "patchSetId": 3
      },
      "lineNbr": 272,
      "author": {
        "id": 12873
      },
      "writtenOn": "2015-01-28T10:02:25Z",
      "side": 1,
      "message": "you assume that [] \u003d\u003d False\nso why not:\nreturn list(set(data.keys()).intersection(set(updated_data.keys())))",
      "revId": "169e18cb7784a17a06626771cb23f162785dee82",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    }
  ]
}