{
  "comments": [
    {
      "key": {
        "uuid": "1ae5cdf2_49273d12",
        "filename": "jenkins_jobs/builder.py",
        "patchSetId": 24
      },
      "lineNbr": 133,
      "author": {
        "id": 2475
      },
      "writtenOn": "2014-06-19T19:13:34Z",
      "side": 1,
      "message": "I proposed on the parent patchset https://review.openstack.org/#/c/100098/2/jenkins_jobs/builder.py  to use config.has_option() instead of catching exceptions.  Ie:\n\n if config.has_option(\u0027job_builder\u0027, \u0027include_path\u0027):\n      self.path \u003d config.get(\u0027job_builder\u0027, \u0027include_path\u0027).split(\u0027:\u0027)\n\nSlightly easier to read compared to exceptions.\n\nFeel free to dismiss.",
      "revId": "602758901d3d852da91f21abfb165efca3af9dc3",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1ae5cdf2_ed963593",
        "filename": "jenkins_jobs/builder.py",
        "patchSetId": 24
      },
      "lineNbr": 133,
      "author": {
        "id": 1054
      },
      "writtenOn": "2014-06-20T15:54:57Z",
      "side": 1,
      "message": "Won\u0027t dismiss, although I\u0027ve sometimes tried to go \u0027the python way\u0027 which is supposedly to ask forgiveness rather than permission, it doesn\u0027t always result in better code.\n\nThink your suggestion is cleaner, so will change to that.",
      "parentUuid": "1ae5cdf2_49273d12",
      "revId": "602758901d3d852da91f21abfb165efca3af9dc3",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1ae5cdf2_0980d5f5",
        "filename": "jenkins_jobs/local_yaml.py",
        "patchSetId": 24
      },
      "lineNbr": 26,
      "author": {
        "id": 2475
      },
      "writtenOn": "2014-06-19T19:13:34Z",
      "side": 1,
      "message": "Nit: Instead of single quoting \u0027!include\u0027 I would use double backquotes to denote a code sample. Ie ``!include``.",
      "revId": "602758901d3d852da91f21abfb165efca3af9dc3",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1ae5cdf2_2983d103",
        "filename": "jenkins_jobs/local_yaml.py",
        "patchSetId": 24
      },
      "lineNbr": 34,
      "author": {
        "id": 2475
      },
      "writtenOn": "2014-06-19T19:13:34Z",
      "side": 1,
      "message": "Nit: double backquotes around !include-raw",
      "revId": "602758901d3d852da91f21abfb165efca3af9dc3",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1ae5cdf2_8973054d",
        "filename": "jenkins_jobs/local_yaml.py",
        "patchSetId": 24
      },
      "lineNbr": 43,
      "author": {
        "id": 2475
      },
      "writtenOn": "2014-06-19T19:13:34Z",
      "side": 1,
      "message": "Nit: double backquotes around !include-raw-escape",
      "revId": "602758901d3d852da91f21abfb165efca3af9dc3",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1ae5cdf2_a9d361ff",
        "filename": "jenkins_jobs/local_yaml.py",
        "patchSetId": 24
      },
      "lineNbr": 54,
      "author": {
        "id": 2475
      },
      "writtenOn": "2014-06-19T19:13:34Z",
      "side": 1,
      "message": "I wish we could show the included file, the yaml template using !include* and the resulting output.  But that can be figured out later on.",
      "revId": "602758901d3d852da91f21abfb165efca3af9dc3",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1ae5cdf2_c9bb4de3",
        "filename": "tests/base.py",
        "patchSetId": 24
      },
      "lineNbr": 169,
      "author": {
        "id": 2475
      },
      "writtenOn": "2014-06-19T19:13:34Z",
      "side": 1,
      "message": "I am not sure this is needed. Looks like it is meant to avoid reloading all the files each time a method of this class is invoked.\n\nThat could use a comment. Ideally we would have the cache build-in the BaseTestCase class. But that is out of scope.",
      "revId": "602758901d3d852da91f21abfb165efca3af9dc3",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1ae5cdf2_ed41d539",
        "filename": "tests/base.py",
        "patchSetId": 24
      },
      "lineNbr": 169,
      "author": {
        "id": 1054
      },
      "writtenOn": "2014-06-20T15:54:57Z",
      "side": 1,
      "message": "It\u0027s binding the parent class method \u0027__read_content\u0027 to the subclass \u0027__read_content\u0027.\n\nIn python methods starting with \u0027__\u0027 are more private and are only defined on the parent class, and are not looked up in the same manner. So without this self.__read_content() doesn\u0027t exist although the parent class defines it.\n\nPerhaps I should change the __read_content signature to _read_content so that it is usable by subclasses since \u0027__\u0027 generally denotes methods and properties that you really shouldn\u0027t access or reuse?\n\nOr I can change the usage below to try and access the parent class definition rather than doing the method binding to have it available via self?",
      "parentUuid": "1ae5cdf2_c9bb4de3",
      "revId": "602758901d3d852da91f21abfb165efca3af9dc3",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1ae5cdf2_90994621",
        "filename": "tests/base.py",
        "patchSetId": 24
      },
      "lineNbr": 169,
      "author": {
        "id": 2475
      },
      "writtenOn": "2014-06-20T16:42:31Z",
      "side": 1,
      "message": "I keep learning things about python. Thanks for the explanation :-)\n\n\u003e In python methods starting with \u0027__\u0027 are more private and are only defined on the parent class, and are not looked up in the same manner. So without this self.__read_content() doesn\u0027t exist although the parent class defines it.\n\nSince we reuse it in a child class, I would adjust it to a single underscore denoting it can be reused by childs and thus drop the line entirely in JsonTestCase()\n\nThat seems a bit nicer and more friendly to newbie pythonists like me \u003d)",
      "parentUuid": "1ae5cdf2_ed41d539",
      "revId": "602758901d3d852da91f21abfb165efca3af9dc3",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    }
  ]
}