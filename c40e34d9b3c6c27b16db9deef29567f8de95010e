{
  "comments": [
    {
      "key": {
        "uuid": "3a961159_03c5445b",
        "filename": "jenkins_jobs/builder.py",
        "patchSetId": 18
      },
      "lineNbr": 715,
      "author": {
        "id": 6987
      },
      "writtenOn": "2014-12-19T19:29:20Z",
      "side": 1,
      "message": "it sems like self.jenkins.get_plugins_info() will always return a list because jenkins has pre-installed core plugins, but the list from plugins-info.yaml may only contain a single plugin, not a list of plugins.  Should we maybe force this into a list object so that it\u0027s the same type for processing in the ModuleRegistry class?",
      "revId": "c40e34d9b3c6c27b16db9deef29567f8de95010e",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a961159_cf189620",
        "filename": "jenkins_jobs/builder.py",
        "patchSetId": 18
      },
      "lineNbr": 715,
      "author": {
        "id": 13487
      },
      "writtenOn": "2014-12-23T00:09:22Z",
      "side": 1,
      "message": "Well the contents of plugins-info.yaml is still a list, it just has a single entry. If it wasn\u0027t a list then the __get_plugins_info_dict method would puke since it uses a list comprehension over the given plugins_list.\n\nSo maybe the behavior you want here is to check that isinstance(plugins_list, list) \u003d\u003d True? And a corresponding unit test to pass a yaml file with non-list contents to the `test` subcommand?\n\nThis instance checking and subsequent exception should probably go in cmd.py...unless you think we should also be validating the return value of self.jenkins.get_plugins_info() here.\n\nCan we rely on the jenkins-python module\u0027s get_plugins_info method to always return a list?",
      "parentUuid": "3a961159_03c5445b",
      "revId": "c40e34d9b3c6c27b16db9deef29567f8de95010e",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a961159_60116f03",
        "filename": "jenkins_jobs/builder.py",
        "patchSetId": 18
      },
      "lineNbr": 715,
      "author": {
        "id": 6987
      },
      "writtenOn": "2014-12-23T01:11:31Z",
      "side": 1,
      "message": "i believe the plugin_list from the plugin-info.yaml file will be a dict not a list. it\u0027s only a list if there are multiple plugins listed in that file.\n\nmy suggestion was to simply turn plugins_list into a list before, so if you get a single dict then just make that a list object contain one dict?\n\nso can we just turn {\u0027foo\u0027:\u0027bar\u0027} into [{\u0027foo\u0027:\u0027bar}] ?  if multiple plugins are in the plugins-info.yaml then it\u0027s already a list.",
      "parentUuid": "3a961159_cf189620",
      "revId": "c40e34d9b3c6c27b16db9deef29567f8de95010e",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a961159_26978049",
        "filename": "jenkins_jobs/builder.py",
        "patchSetId": 18
      },
      "lineNbr": 715,
      "author": {
        "id": 13487
      },
      "writtenOn": "2014-12-23T03:06:23Z",
      "side": 1,
      "message": "Yo, I just uploaded a new patch set with error checking and a unit test that validates that the syntax used in plugins-info.yaml does actually lead to the creation of a single-element list. \n\nhttp://www.yaml.org/spec/1.2/spec.html#id2797382 for further reference.",
      "parentUuid": "3a961159_60116f03",
      "revId": "c40e34d9b3c6c27b16db9deef29567f8de95010e",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a961159_0373844e",
        "filename": "tests/moduleregistry/test_moduleregistry.py",
        "patchSetId": 18
      },
      "lineNbr": 35,
      "author": {
        "id": 6987
      },
      "writtenOn": "2014-12-19T19:29:20Z",
      "side": 1,
      "message": "long names typically have spaces in them.",
      "revId": "c40e34d9b3c6c27b16db9deef29567f8de95010e",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a961159_86eaf4d5",
        "filename": "tests/moduleregistry/test_moduleregistry.py",
        "patchSetId": 18
      },
      "lineNbr": 35,
      "author": {
        "id": 13487
      },
      "writtenOn": "2014-12-23T03:06:23Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3a961159_0373844e",
      "revId": "c40e34d9b3c6c27b16db9deef29567f8de95010e",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a961159_c3a33c9c",
        "filename": "tests/moduleregistry/test_moduleregistry.py",
        "patchSetId": 18
      },
      "lineNbr": 37,
      "author": {
        "id": 6987
      },
      "writtenOn": "2014-12-19T19:29:20Z",
      "side": 1,
      "message": "add longName as well?",
      "revId": "c40e34d9b3c6c27b16db9deef29567f8de95010e",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a961159_cfefb6e7",
        "filename": "tests/moduleregistry/test_moduleregistry.py",
        "patchSetId": 18
      },
      "lineNbr": 37,
      "author": {
        "id": 13487
      },
      "writtenOn": "2014-12-23T00:09:22Z",
      "side": 1,
      "message": "In one of your previous comments I had been given the impression that longName isn\u0027t guaranteed to be available for plugins so I left it out in one of the examples.",
      "parentUuid": "3a961159_c3a33c9c",
      "revId": "c40e34d9b3c6c27b16db9deef29567f8de95010e",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a961159_a6bc50dd",
        "filename": "tests/moduleregistry/test_moduleregistry.py",
        "patchSetId": 18
      },
      "lineNbr": 37,
      "author": {
        "id": 13487
      },
      "writtenOn": "2014-12-23T03:06:23Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3a961159_c3a33c9c",
      "revId": "c40e34d9b3c6c27b16db9deef29567f8de95010e",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a961159_e48897c8",
        "filename": "tests/moduleregistry/test_moduleregistry.py",
        "patchSetId": 18
      },
      "lineNbr": 58,
      "author": {
        "id": 6987
      },
      "writtenOn": "2014-12-19T19:29:20Z",
      "side": 1,
      "message": "since it looks like there\u0027s support for longName, should you maybe add a test for that as well?",
      "revId": "c40e34d9b3c6c27b16db9deef29567f8de95010e",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a961159_4fd026c9",
        "filename": "tests/moduleregistry/test_moduleregistry.py",
        "patchSetId": 18
      },
      "lineNbr": 58,
      "author": {
        "id": 13487
      },
      "writtenOn": "2014-12-23T00:09:22Z",
      "side": 1,
      "message": "My understanding based on one of your previous comments is that longName is optional, shortName required. Maybe I will modify this test to check both plugin_info[\u0027shortName\u0027] and plugin_info[\u0027longName\u0027].",
      "parentUuid": "3a961159_e48897c8",
      "revId": "c40e34d9b3c6c27b16db9deef29567f8de95010e",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a961159_80c65b98",
        "filename": "tests/moduleregistry/test_moduleregistry.py",
        "patchSetId": 18
      },
      "lineNbr": 58,
      "author": {
        "id": 6987
      },
      "writtenOn": "2014-12-23T01:11:31Z",
      "side": 1,
      "message": "yes, that is correct.  shortName required, longName optional.  It\u0027s great that you have a test for the required, but don\u0027t we also want to test the optional as well since that\u0027s supported?",
      "parentUuid": "3a961159_4fd026c9",
      "revId": "c40e34d9b3c6c27b16db9deef29567f8de95010e",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a961159_06dfe43a",
        "filename": "tests/moduleregistry/test_moduleregistry.py",
        "patchSetId": 18
      },
      "lineNbr": 58,
      "author": {
        "id": 13487
      },
      "writtenOn": "2014-12-23T03:06:23Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3a961159_80c65b98",
      "revId": "c40e34d9b3c6c27b16db9deef29567f8de95010e",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    }
  ]
}