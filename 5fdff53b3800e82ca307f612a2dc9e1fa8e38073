{
  "comments": [
    {
      "key": {
        "uuid": "da6ed579_d8127058",
        "filename": "jenkins_jobs/modules/helpers.py",
        "patchSetId": 6
      },
      "lineNbr": 422,
      "author": {
        "id": 13807
      },
      "writtenOn": "2016-01-18T03:34:30Z",
      "side": 1,
      "message": "Should describe what the values of entity, entity_xml and child_mapping are in the docstring below.",
      "revId": "5fdff53b3800e82ca307f612a2dc9e1fa8e38073",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a68dd71_001ff85f",
        "filename": "jenkins_jobs/modules/helpers.py",
        "patchSetId": 6
      },
      "lineNbr": 434,
      "author": {
        "id": 1054
      },
      "writtenOn": "2016-01-21T23:32:48Z",
      "side": 1,
      "message": "It should be possible to combine this and the function above into a single mapping method.\n\nWould be great if over time we could simplify a lot of the common logic by simply having many functions just call the same mapping method.",
      "revId": "5fdff53b3800e82ca307f612a2dc9e1fa8e38073",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a5de9d1_6de822b5",
        "filename": "jenkins_jobs/modules/helpers.py",
        "patchSetId": 6
      },
      "lineNbr": 434,
      "author": {
        "id": 13487
      },
      "writtenOn": "2016-01-29T00:57:36Z",
      "side": 1,
      "message": "I agree, it seems like \"fail_required\" could be an optional parameter to the existing method with a default value of False.",
      "parentUuid": "9a68dd71_001ff85f",
      "revId": "5fdff53b3800e82ca307f612a2dc9e1fa8e38073",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a5de9d1_3eb0eb89",
        "filename": "jenkins_jobs/modules/helpers.py",
        "patchSetId": 6
      },
      "lineNbr": 434,
      "author": {
        "id": 1054
      },
      "writtenOn": "2016-01-29T18:28:36Z",
      "side": 1,
      "message": "I think ultimately, would want to be able to support the following:\n\n * required attributes\n * attributes whose value must be in a given set\n * taking attribute order from yaml by default\n * plugin version specific mappings\n * nested mappings\n * callback functions for complex decisions\n\nThe first two are of the main importance here, some of the others may necessitate a significant rewrite of the method each time to get it right, but this should be treated as an internal to JJB method and be freely changed as an implementation detail.\n\nSo to start with I think we need a mapping that follows the existing ideas, and allows for the following information to be optional without adding lots of elements:\n\n * default values\n * optional attributes (skip if None)\n * required attribute (MissingAttributeError)\n * specific values allowed (InvalidAttributeError)\n\nI\u0027m thinking the following might cover these:\n\n - [yaml name, xml name, val, extra xml attrs, callback]\n\nAdd some special internal state objects for val to jenkins_jobs/modules/base.py\n\n - REQUIRED \u003d object()\n - OPTIONAL \u003d object()\n\nif default_val \u003d\u003d base.OPTIONAL, ignore if not defined\nif default_val \u003d\u003d base.REQUIRED:\n  if callback defined, call it and raise the result as an exception\n  else raise MissingAttributeError(attr)\nelse set the default value\n\nAlternatively add another state object, which is a class this time:\n\n - MUST_MATCH(sequence of valid values)\n\nand raise an InvalidAttributeError if attribute val is not within, although this one is a little trickier since possibly also want to allow a default and only check if the user provided.\n\n\nMaybe the following might work better:\n\n - [attr name, xml name, default val, xml callback, attr callback]\n\nWhere we provide a standard callback wrapper for applying extra xml attrs, and standard callbacks for Required and MustMatch, which then the absence of such callbacks reflects either an attribute with a default value or an optional if \u0027default val\u0027 is None.\n\n\nThoughts?\n\n\nI probably need to think about it more myself, and either put or seen an initial implementation to be more sure.",
      "parentUuid": "7a5de9d1_6de822b5",
      "revId": "5fdff53b3800e82ca307f612a2dc9e1fa8e38073",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a5de9d1_a0f82ac4",
        "filename": "jenkins_jobs/modules/helpers.py",
        "patchSetId": 6
      },
      "lineNbr": 434,
      "author": {
        "id": 13807
      },
      "writtenOn": "2016-01-30T00:47:27Z",
      "side": 1,
      "message": "I like the idea of adding an extra parameter:\n\n * fail_required\u003dtrue|false (default: false)\n\nI think for this patch adding the above parameter would be sufficient to get this merged.\n\nThe other ideas are really good ideas too but in my opinion should be a 2nd patch. Kien would you be willing to explore the additional improvements listed by Wayne?\n\nI agree that the mapping should be improved to support:\n\n * default values\n * optional attributes (skip if None)\n * required attribute (MissingAttributeError)\n * specific values allowed (InvalidAttributeError)\n\nThese enhancements will make adding support for new features incredibly simple and code review will be quicker for new plugins and will have high impact on the productivity of JJB in my opinion.\n\nNested mappings is worth looking into too for plugins that have these, maybe this is a 3rd improvement patch.\n\nI need to think more about the callback option though. I\u0027m not yet seeing the value in it. Wayne do you have a specific example you can describe where it would be useful?",
      "parentUuid": "7a5de9d1_3eb0eb89",
      "revId": "5fdff53b3800e82ca307f612a2dc9e1fa8e38073",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a5de9d1_40eff6e8",
        "filename": "jenkins_jobs/modules/helpers.py",
        "patchSetId": 6
      },
      "lineNbr": 434,
      "author": {
        "id": 13807
      },
      "writtenOn": "2016-01-30T00:48:33Z",
      "side": 1,
      "message": "Sorry I mean to say Darragh in my last sentence.",
      "parentUuid": "7a5de9d1_a0f82ac4",
      "revId": "5fdff53b3800e82ca307f612a2dc9e1fa8e38073",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a5de9d1_5a227e53",
        "filename": "jenkins_jobs/modules/helpers.py",
        "patchSetId": 6
      },
      "lineNbr": 434,
      "author": {
        "id": 13807
      },
      "writtenOn": "2016-01-30T15:51:00Z",
      "side": 1,
      "message": "Maybe a crazy idea but what if we did:\n\n OPTIONAL \u003d None\n REQUIRED \u003d MissingAttributeError\n # otherwise\n DEFAULT \u003d \u003cmapping_value\u003e\n\nThis would allow us to not need an additional parameter and at the same time reuse the same 3rd mapping field to determine if a value is the default value, an optional value, or a required value.\n\nExisting code will continue to work but in the future we can recommend folks use the special keyword OPTIONAL instead of None (maps to the same None value) but is clearer when read by a human. We can then check for REQUIRED attributes by checking if that field is MissingAttributeError class type.\n\nThoughts?",
      "parentUuid": "7a5de9d1_40eff6e8",
      "revId": "5fdff53b3800e82ca307f612a2dc9e1fa8e38073",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a5de9d1_1d01556a",
        "filename": "jenkins_jobs/modules/helpers.py",
        "patchSetId": 6
      },
      "lineNbr": 434,
      "author": {
        "id": 1054
      },
      "writtenOn": "2016-01-31T20:16:56Z",
      "side": 1,
      "message": "The callback should allow handling of conditional sections, as well as nested sections, could pass in a reference to the same function again along with a predefined mapping dict to handle nested/conditional sections. Possible handle some edge cases as well such as what XML to output if handling a list of stuff that should use \u0027emptyList\u0027 in the XML instead of just closing the element name.\n\nWith Thanh\u0027s suggestion though I think we can wait until we need it to work out that additional capability.\n\nI think the only piece to close out on for the third mapping parameter to handle values that must be one of given set.\n\nDo we just want to have a custom container for the InvalidAttributeError?\n\ni.e.\n\n Optional \u003d object()  # could just use None instead for this\n Required \u003d object()  # raise MissingAttribute exception if not attr\n class MustMatch(object):\n     def __init__(valid, default_pos\u003d0):\n         self.valid \u003d valid\n         self.default \u003d valid[default_pos]\n MustMatch([\u003clist-of-valid\u003e])\n \u003cdefault\u003e\n\nOnly concern is that then the default option, which should be the most common, only falls out after checking whether the default doesn\u0027t match all the other options which makes the code a little bit more expensive to execute.\n\nI\u0027d nearly do out the code to using callbacks to raise exceptions and compare to what would fallout from the above just to compare.",
      "parentUuid": "7a5de9d1_5a227e53",
      "revId": "5fdff53b3800e82ca307f612a2dc9e1fa8e38073",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a5de9d1_33565607",
        "filename": "jenkins_jobs/modules/helpers.py",
        "patchSetId": 6
      },
      "lineNbr": 434,
      "author": {
        "id": 13807
      },
      "writtenOn": "2016-02-02T18:53:03Z",
      "side": 1,
      "message": "I just remembered an edge case that\u0027s annoying and makes me reconsider the value of the \"Optional\" parameter. I\u0027ve been hit by this a few times now and think we can potentially fix it with this patch if you guys agree. I\u0027ll explain with an example.\n\nIf you create a simple job and set:\n\n disabled: true\n\nThis will of course set the job to be disabled. If later on you decide you no longer need this setting and delete the disabled field. When JJB updates the job it will leave the setting in the last state that the user configured it in YAML. I\u0027ve been bitten by this a few times across several different configuration options and the solution is that once you set an optional setting, it must be continued to be configured for the rest of it\u0027s lifetime (unless you delete the job and reupload). I guess if you update a Job in Jenkins that is missing a previously used parameter it will retain the last configured selection.\n\nI feel like the user experience will be better if instead JJB automatically handled the default setting for the user if they do not set a configuration so that if someone set something, and then removed it in the future it\u0027ll do something more deterministic. This means that all \"optional\" fields should actually be covered by \"default\" and if a user does not enter an optional value then JJB will just configure the default. In this case we can simply use \"None\" to denote that a field is REQUIRED and everything else is DEFAULT.\n\nThoughts?",
      "parentUuid": "7a5de9d1_1d01556a",
      "revId": "5fdff53b3800e82ca307f612a2dc9e1fa8e38073",
      "serverId": "4a232e18-c5a9-48ee-94c0-e04e7cca6543",
      "unresolved": false
    }
  ]
}